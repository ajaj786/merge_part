
led blinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bac  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d30  08001d30  00011d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d40  08001d40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d40  08001d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d48  08001d48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d48  08001d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001d5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001d5c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000897b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013d4  00000000  00000000  000289b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  00029d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a0  00000000  00000000  0002a6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c97b  00000000  00000000  0002af70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007672  00000000  00000000  000478eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0dcc  00000000  00000000  0004ef5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ffd29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b4  00000000  00000000  000ffda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001d18 	.word	0x08001d18

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08001d18 	.word	0x08001d18

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f97e 	bl	80007cc <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay (100);   /* Insert delay 100 ms */
 80004d0:	2064      	movs	r0, #100	; 0x64
 80004d2:	f000 f9e9 	bl	80008a8 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f80b 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f87b 	bl	80005d4 <MX_GPIO_Init>
  MX_TIM7_Init();
 80004de:	f000 f843 	bl	8000568 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim7);
 80004e2:	4802      	ldr	r0, [pc, #8]	; (80004ec <main+0x24>)
 80004e4:	f001 f91e 	bl	8001724 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x20>
 80004ea:	bf00      	nop
 80004ec:	20000028 	.word	0x20000028

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b092      	sub	sp, #72	; 0x48
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0318 	add.w	r3, r7, #24
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fc02 	bl	8001d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000512:	2302      	movs	r3, #2
 8000514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000516:	2301      	movs	r3, #1
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051a:	2310      	movs	r3, #16
 800051c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051e:	2300      	movs	r3, #0
 8000520:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fcbe 	bl	8000ea8 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000532:	f000 f891 	bl	8000658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fefa 	bl	8001348 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800055a:	f000 f87d 	bl	8000658 <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3748      	adds	r7, #72	; 0x48
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_TIM7_Init+0x64>)
 8000578:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <MX_TIM7_Init+0x68>)
 800057a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_TIM7_Init+0x64>)
 800057e:	2210      	movs	r2, #16
 8000580:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_TIM7_Init+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_TIM7_Init+0x64>)
 800058a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_TIM7_Init+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <MX_TIM7_Init+0x64>)
 8000598:	f001 f874 	bl	8001684 <HAL_TIM_Base_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80005a2:	f000 f859 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a6:	2300      	movs	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MX_TIM7_Init+0x64>)
 80005b4:	f001 faf8 	bl	8001ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80005be:	f000 f84b 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028
 80005d0:	40001400 	.word	0x40001400

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_GPIO_Init+0x7c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <MX_GPIO_Init+0x7c>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_GPIO_Init+0x7c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_GPIO_Init+0x7c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <MX_GPIO_Init+0x7c>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_GPIO_Init+0x7c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2101      	movs	r1, #1
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <MX_GPIO_Init+0x80>)
 8000628:	f000 fc0c 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062c:	2301      	movs	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0x80>)
 8000644:	f000 fa60 	bl	8000b08 <HAL_GPIO_Init>

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40020000 	.word	0x40020000

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065e:	e7fe      	b.n	800065e <Error_Handler+0x6>

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x48>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x48>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	6453      	str	r3, [r2, #68]	; 0x44
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x48>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_MspInit+0x48>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_MspInit+0x48>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_MspInit+0x48>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800

080006ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_TIM_Base_MspInit+0x48>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d115      	bne.n	80006ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <HAL_TIM_Base_MspInit+0x4c>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <HAL_TIM_Base_MspInit+0x4c>)
 80006c8:	f043 0320 	orr.w	r3, r3, #32
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_TIM_Base_MspInit+0x4c>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 0320 	and.w	r3, r3, #32
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2037      	movs	r0, #55	; 0x37
 80006e0:	f000 f9db 	bl	8000a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80006e4:	2037      	movs	r0, #55	; 0x37
 80006e6:	f000 f9f4 	bl	8000ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40001400 	.word	0x40001400
 80006f8:	40023800 	.word	0x40023800

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000742:	f000 f895 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

	/* Insert delay 100 ms */
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <TIM7_IRQHandler+0x18>)
 8000752:	f001 f855 	bl	8001800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_0);
 8000756:	2101      	movs	r1, #1
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <TIM7_IRQHandler+0x1c>)
 800075a:	f000 fb8b 	bl	8000e74 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM7_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000028 	.word	0x20000028
 8000768:	40020000 	.word	0x40020000

0800076c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800077c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800077e:	e003      	b.n	8000788 <LoopCopyDataInit>

08000780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000786:	3104      	adds	r1, #4

08000788 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800078c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800078e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000790:	d3f6      	bcc.n	8000780 <CopyDataInit>
  ldr  r2, =_sbss
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000794:	e002      	b.n	800079c <LoopFillZerobss>

08000796 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000796:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000798:	f842 3b04 	str.w	r3, [r2], #4

0800079c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800079e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007a0:	d3f9      	bcc.n	8000796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007a2:	f7ff ffe3 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a6:	f001 fa8b 	bl	8001cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007aa:	f7ff fe8d 	bl	80004c8 <main>
  bx  lr    
 80007ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007b0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80007b4:	08001d50 	.word	0x08001d50
  ldr  r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007bc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80007c0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80007c4:	20000074 	.word	0x20000074

080007c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC_IRQHandler>
	...

080007cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <HAL_Init+0x40>)
 80007d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_Init+0x40>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_Init+0x40>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_Init+0x40>)
 80007ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f945 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f808 	bl	8000810 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000800:	f7ff ff2e 	bl	8000660 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023c00 	.word	0x40023c00

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x54>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x58>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	fbb3 f3f1 	udiv	r3, r3, r1
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f95d 	bl	8000aee <HAL_SYSTICK_Config>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e00e      	b.n	800085c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d80a      	bhi.n	800085a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f000 f925 	bl	8000a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_InitTick+0x5c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000000 	.word	0x20000000
 8000868:	20000008 	.word	0x20000008
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x1c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x20>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a03      	ldr	r2, [pc, #12]	; (8000890 <HAL_IncTick+0x20>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	20000008 	.word	0x20000008
 8000890:	20000070 	.word	0x20000070

08000894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <HAL_GetTick+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	20000070 	.word	0x20000070

080008a8 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff fff0 	bl	8000894 <HAL_GetTick>
 80008b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c0:	d005      	beq.n	80008ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_Delay+0x40>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ce:	bf00      	nop
 80008d0:	f7ff ffe0 	bl	8000894 <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d8f7      	bhi.n	80008d0 <HAL_Delay+0x28>
  {
  }
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000008 	.word	0x20000008

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4906      	ldr	r1, [pc, #24]	; (8000984 <__NVIC_EnableIRQ+0x34>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db0a      	blt.n	80009b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	490c      	ldr	r1, [pc, #48]	; (80009d4 <__NVIC_SetPriority+0x4c>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b0:	e00a      	b.n	80009c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <__NVIC_SetPriority+0x50>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	3b04      	subs	r3, #4
 80009c0:	0112      	lsls	r2, r2, #4
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	440b      	add	r3, r1
 80009c6:	761a      	strb	r2, [r3, #24]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f1c3 0307 	rsb	r3, r3, #7
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	bf28      	it	cs
 80009fa:	2304      	movcs	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3304      	adds	r3, #4
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	d902      	bls.n	8000a0c <NVIC_EncodePriority+0x30>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3b03      	subs	r3, #3
 8000a0a:	e000      	b.n	8000a0e <NVIC_EncodePriority+0x32>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43d9      	mvns	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	4313      	orrs	r3, r2
         );
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3724      	adds	r7, #36	; 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f7ff ff90 	bl	8000988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff2d 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff42 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff90 	bl	80009dc <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5f 	bl	8000988 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff35 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffa2 	bl	8000a40 <SysTick_Config>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e16f      	b.n	8000df8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 8161 	beq.w	8000df2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d00b      	beq.n	8000b50 <HAL_GPIO_Init+0x48>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b44:	2b11      	cmp	r3, #17
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b12      	cmp	r3, #18
 8000b4e:	d130      	bne.n	8000bb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b86:	2201      	movs	r2, #1
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	091b      	lsrs	r3, r3, #4
 8000b9c:	f003 0201 	and.w	r2, r3, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0xea>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b12      	cmp	r3, #18
 8000bf0:	d123      	bne.n	8000c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	220f      	movs	r2, #15
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	691a      	ldr	r2, [r3, #16]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	6939      	ldr	r1, [r7, #16]
 8000c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0203 	and.w	r2, r3, #3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 80bb 	beq.w	8000df2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	4b64      	ldr	r3, [pc, #400]	; (8000e14 <HAL_GPIO_Init+0x30c>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	4a63      	ldr	r2, [pc, #396]	; (8000e14 <HAL_GPIO_Init+0x30c>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8c:	4b61      	ldr	r3, [pc, #388]	; (8000e14 <HAL_GPIO_Init+0x30c>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c98:	4a5f      	ldr	r2, [pc, #380]	; (8000e18 <HAL_GPIO_Init+0x310>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a57      	ldr	r2, [pc, #348]	; (8000e1c <HAL_GPIO_Init+0x314>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d031      	beq.n	8000d28 <HAL_GPIO_Init+0x220>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a56      	ldr	r2, [pc, #344]	; (8000e20 <HAL_GPIO_Init+0x318>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d02b      	beq.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a55      	ldr	r2, [pc, #340]	; (8000e24 <HAL_GPIO_Init+0x31c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d025      	beq.n	8000d20 <HAL_GPIO_Init+0x218>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a54      	ldr	r2, [pc, #336]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d01f      	beq.n	8000d1c <HAL_GPIO_Init+0x214>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a53      	ldr	r2, [pc, #332]	; (8000e2c <HAL_GPIO_Init+0x324>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d019      	beq.n	8000d18 <HAL_GPIO_Init+0x210>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a52      	ldr	r2, [pc, #328]	; (8000e30 <HAL_GPIO_Init+0x328>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d013      	beq.n	8000d14 <HAL_GPIO_Init+0x20c>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a51      	ldr	r2, [pc, #324]	; (8000e34 <HAL_GPIO_Init+0x32c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d00d      	beq.n	8000d10 <HAL_GPIO_Init+0x208>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a50      	ldr	r2, [pc, #320]	; (8000e38 <HAL_GPIO_Init+0x330>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d007      	beq.n	8000d0c <HAL_GPIO_Init+0x204>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a4f      	ldr	r2, [pc, #316]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d101      	bne.n	8000d08 <HAL_GPIO_Init+0x200>
 8000d04:	2308      	movs	r3, #8
 8000d06:	e010      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d08:	2309      	movs	r3, #9
 8000d0a:	e00e      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	e00c      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d10:	2306      	movs	r3, #6
 8000d12:	e00a      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d14:	2305      	movs	r3, #5
 8000d16:	e008      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d18:	2304      	movs	r3, #4
 8000d1a:	e006      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e004      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e002      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <HAL_GPIO_Init+0x222>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	f002 0203 	and.w	r2, r2, #3
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4093      	lsls	r3, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d3c:	4936      	ldr	r1, [pc, #216]	; (8000e18 <HAL_GPIO_Init+0x310>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <HAL_GPIO_Init+0x338>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d6e:	4a34      	ldr	r2, [pc, #208]	; (8000e40 <HAL_GPIO_Init+0x338>)
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <HAL_GPIO_Init+0x338>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d98:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <HAL_GPIO_Init+0x338>)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <HAL_GPIO_Init+0x338>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <HAL_GPIO_Init+0x338>)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_GPIO_Init+0x338>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <HAL_GPIO_Init+0x338>)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f ae88 	bne.w	8000b18 <HAL_GPIO_Init+0x10>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	371c      	adds	r7, #28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40013800 	.word	0x40013800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020c00 	.word	0x40020c00
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40021400 	.word	0x40021400
 8000e34:	40021800 	.word	0x40021800
 8000e38:	40021c00 	.word	0x40021c00
 8000e3c:	40022000 	.word	0x40022000
 8000e40:	40013c00 	.word	0x40013c00

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	619a      	str	r2, [r3, #24]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	041a      	lsls	r2, r3, #16
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43d9      	mvns	r1, r3
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	400b      	ands	r3, r1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
	...

08000ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e237      	b.n	800132a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d050      	beq.n	8000f68 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ec6:	4ba3      	ldr	r3, [pc, #652]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d00c      	beq.n	8000eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed2:	4ba0      	ldr	r3, [pc, #640]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d112      	bne.n	8000f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ede:	4b9d      	ldr	r3, [pc, #628]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eea:	d10b      	bne.n	8000f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eec:	4b99      	ldr	r3, [pc, #612]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d036      	beq.n	8000f66 <HAL_RCC_OscConfig+0xbe>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d132      	bne.n	8000f66 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e212      	b.n	800132a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	4b93      	ldr	r3, [pc, #588]	; (8001158 <HAL_RCC_OscConfig+0x2b0>)
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d013      	beq.n	8000f3e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f16:	f7ff fcbd 	bl	8000894 <HAL_GetTick>
 8000f1a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fcb9 	bl	8000894 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e1fc      	b.n	800132a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f30:	4b88      	ldr	r3, [pc, #544]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x76>
 8000f3c:	e014      	b.n	8000f68 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3e:	f7ff fca9 	bl	8000894 <HAL_GetTick>
 8000f42:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f46:	f7ff fca5 	bl	8000894 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	; 0x64
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e1e8      	b.n	800132a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f58:	4b7e      	ldr	r3, [pc, #504]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1f0      	bne.n	8000f46 <HAL_RCC_OscConfig+0x9e>
 8000f64:	e000      	b.n	8000f68 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d077      	beq.n	8001064 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f74:	4b77      	ldr	r3, [pc, #476]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f80:	4b74      	ldr	r3, [pc, #464]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d126      	bne.n	8000fda <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f8c:	4b71      	ldr	r3, [pc, #452]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d120      	bne.n	8000fda <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f98:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x108>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e1bc      	b.n	800132a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	21f8      	movs	r1, #248	; 0xf8
 8000fbe:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	69b9      	ldr	r1, [r7, #24]
 8000fc2:	fa91 f1a1 	rbit	r1, r1
 8000fc6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fc8:	6979      	ldr	r1, [r7, #20]
 8000fca:	fab1 f181 	clz	r1, r1
 8000fce:	b2c9      	uxtb	r1, r1
 8000fd0:	408b      	lsls	r3, r1
 8000fd2:	4960      	ldr	r1, [pc, #384]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd8:	e044      	b.n	8001064 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d02a      	beq.n	8001038 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <HAL_RCC_OscConfig+0x2b4>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc54 	bl	8000894 <HAL_GetTick>
 8000fec:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc50 	bl	8000894 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e193      	b.n	800132a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001002:	4b54      	ldr	r3, [pc, #336]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b51      	ldr	r3, [pc, #324]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	21f8      	movs	r1, #248	; 0xf8
 800101c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	fa91 f1a1 	rbit	r1, r1
 8001024:	60f9      	str	r1, [r7, #12]
  return result;
 8001026:	68f9      	ldr	r1, [r7, #12]
 8001028:	fab1 f181 	clz	r1, r1
 800102c:	b2c9      	uxtb	r1, r1
 800102e:	408b      	lsls	r3, r1
 8001030:	4948      	ldr	r1, [pc, #288]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
 8001036:	e015      	b.n	8001064 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001038:	4b48      	ldr	r3, [pc, #288]	; (800115c <HAL_RCC_OscConfig+0x2b4>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fc29 	bl	8000894 <HAL_GetTick>
 8001042:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fc25 	bl	8000894 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e168      	b.n	800132a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001058:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f0      	bne.n	8001046 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d030      	beq.n	80010d2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d016      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <HAL_RCC_OscConfig+0x2b8>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff fc09 	bl	8000894 <HAL_GetTick>
 8001082:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001086:	f7ff fc05 	bl	8000894 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e148      	b.n	800132a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 800109a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x1de>
 80010a4:	e015      	b.n	80010d2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <HAL_RCC_OscConfig+0x2b8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ac:	f7ff fbf2 	bl	8000894 <HAL_GetTick>
 80010b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fbee 	bl	8000894 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e131      	b.n	800132a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8088 	beq.w	80011f0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d110      	bne.n	8001114 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110e:	2301      	movs	r3, #1
 8001110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_RCC_OscConfig+0x2bc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_RCC_OscConfig+0x2bc>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_RCC_OscConfig+0x2bc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001128:	2b00      	cmp	r3, #0
 800112a:	d123      	bne.n	8001174 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x2bc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_RCC_OscConfig+0x2bc>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001138:	f7ff fbac 	bl	8000894 <HAL_GetTick>
 800113c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113e:	e013      	b.n	8001168 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001140:	f7ff fba8 	bl	8000894 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d90c      	bls.n	8001168 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e0eb      	b.n	800132a <HAL_RCC_OscConfig+0x482>
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40023802 	.word	0x40023802
 800115c:	42470000 	.word	0x42470000
 8001160:	42470e80 	.word	0x42470e80
 8001164:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	4b72      	ldr	r3, [pc, #456]	; (8001334 <HAL_RCC_OscConfig+0x48c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0e5      	beq.n	8001140 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x490>)
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d015      	beq.n	80011b2 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fb85 	bl	8000894 <HAL_GetTick>
 800118a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fb81 	bl	8000894 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e0c2      	b.n	800132a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	4b65      	ldr	r3, [pc, #404]	; (800133c <HAL_RCC_OscConfig+0x494>)
 80011a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0ee      	beq.n	800118e <HAL_RCC_OscConfig+0x2e6>
 80011b0:	e014      	b.n	80011dc <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fb6f 	bl	8000894 <HAL_GetTick>
 80011b6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fb6b 	bl	8000894 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e0ac      	b.n	800132a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	4b5a      	ldr	r3, [pc, #360]	; (800133c <HAL_RCC_OscConfig+0x494>)
 80011d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ee      	bne.n	80011ba <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e4:	4b55      	ldr	r3, [pc, #340]	; (800133c <HAL_RCC_OscConfig+0x494>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	4a54      	ldr	r2, [pc, #336]	; (800133c <HAL_RCC_OscConfig+0x494>)
 80011ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 8097 	beq.w	8001328 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011fa:	4b50      	ldr	r3, [pc, #320]	; (800133c <HAL_RCC_OscConfig+0x494>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b08      	cmp	r3, #8
 8001204:	d061      	beq.n	80012ca <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d146      	bne.n	800129c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120e:	4b4c      	ldr	r3, [pc, #304]	; (8001340 <HAL_RCC_OscConfig+0x498>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fb3e 	bl	8000894 <HAL_GetTick>
 8001218:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff fb3a 	bl	8000894 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e07d      	b.n	800132a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_RCC_OscConfig+0x494>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800123a:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_RCC_OscConfig+0x494>)
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_OscConfig+0x49c>)
 8001240:	4013      	ands	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	69d1      	ldr	r1, [r2, #28]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6a12      	ldr	r2, [r2, #32]
 800124a:	4311      	orrs	r1, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001250:	0192      	lsls	r2, r2, #6
 8001252:	4311      	orrs	r1, r2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001258:	0612      	lsls	r2, r2, #24
 800125a:	4311      	orrs	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001260:	0852      	lsrs	r2, r2, #1
 8001262:	3a01      	subs	r2, #1
 8001264:	0412      	lsls	r2, r2, #16
 8001266:	430a      	orrs	r2, r1
 8001268:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_RCC_OscConfig+0x494>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_RCC_OscConfig+0x498>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fb0e 	bl	8000894 <HAL_GetTick>
 8001278:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fb0a 	bl	8000894 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e04d      	b.n	800132a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_RCC_OscConfig+0x494>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x3d4>
 800129a:	e045      	b.n	8001328 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_RCC_OscConfig+0x498>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff faf7 	bl	8000894 <HAL_GetTick>
 80012a6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff faf3 	bl	8000894 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b64      	cmp	r3, #100	; 0x64
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e036      	b.n	800132a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_RCC_OscConfig+0x494>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x402>
 80012c8:	e02e      	b.n	8001328 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e029      	b.n	800132a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_RCC_OscConfig+0x494>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d11c      	bne.n	8001324 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d115      	bne.n	8001324 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	099b      	lsrs	r3, r3, #6
 80012fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001304:	429a      	cmp	r2, r3
 8001306:	d10d      	bne.n	8001324 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001312:	429a      	cmp	r2, r3
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40007000 	.word	0x40007000
 8001338:	40023870 	.word	0x40023870
 800133c:	40023800 	.word	0x40023800
 8001340:	42470060 	.word	0x42470060
 8001344:	f0bc8000 	.word	0xf0bc8000

08001348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0d2      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d90c      	bls.n	8001384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136a:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0be      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139c:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a5b      	ldr	r2, [pc, #364]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a55      	ldr	r2, [pc, #340]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4950      	ldr	r1, [pc, #320]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d040      	beq.n	8001460 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d115      	bne.n	800141e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e085      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e079      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e071      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141e:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f023 0203 	bic.w	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4939      	ldr	r1, [pc, #228]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fa30 	bl	8000894 <HAL_GetTick>
 8001434:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	e00a      	b.n	800144e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001438:	f7ff fa2c 	bl	8000894 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e059      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 020c 	and.w	r2, r3, #12
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1eb      	bne.n	8001438 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d20c      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e03c      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	491b      	ldr	r1, [pc, #108]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4913      	ldr	r1, [pc, #76]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80014c6:	f000 f82b 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 80014ca:	4601      	mov	r1, r0
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d4:	22f0      	movs	r2, #240	; 0xf0
 80014d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	fa92 f2a2 	rbit	r2, r2
 80014de:	60fa      	str	r2, [r7, #12]
  return result;
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	fab2 f282 	clz	r2, r2
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	40d3      	lsrs	r3, r2
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_RCC_ClockConfig+0x1cc>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	fa21 f303 	lsr.w	r3, r1, r3
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_RCC_ClockConfig+0x1d0>)
 80014f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_ClockConfig+0x1d4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f988 	bl	8000810 <HAL_InitTick>

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023c00 	.word	0x40023c00
 8001510:	40023800 	.word	0x40023800
 8001514:	08001d30 	.word	0x08001d30
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001536:	4b50      	ldr	r3, [pc, #320]	; (8001678 <HAL_RCC_GetSysClockFreq+0x158>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d007      	beq.n	8001552 <HAL_RCC_GetSysClockFreq+0x32>
 8001542:	2b08      	cmp	r3, #8
 8001544:	d008      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0x38>
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 808d 	bne.w	8001666 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800154c:	4b4b      	ldr	r3, [pc, #300]	; (800167c <HAL_RCC_GetSysClockFreq+0x15c>)
 800154e:	60bb      	str	r3, [r7, #8]
       break;
 8001550:	e08c      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001552:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <HAL_RCC_GetSysClockFreq+0x160>)
 8001554:	60bb      	str	r3, [r7, #8]
      break;
 8001556:	e089      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <HAL_RCC_GetSysClockFreq+0x158>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001560:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_RCC_GetSysClockFreq+0x158>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d023      	beq.n	80015b6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156e:	4b42      	ldr	r3, [pc, #264]	; (8001678 <HAL_RCC_GetSysClockFreq+0x158>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	099b      	lsrs	r3, r3, #6
 8001574:	f04f 0400 	mov.w	r4, #0
 8001578:	f240 11ff 	movw	r1, #511	; 0x1ff
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	ea03 0501 	and.w	r5, r3, r1
 8001584:	ea04 0602 	and.w	r6, r4, r2
 8001588:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <HAL_RCC_GetSysClockFreq+0x160>)
 800158a:	fb02 f106 	mul.w	r1, r2, r6
 800158e:	2200      	movs	r2, #0
 8001590:	fb02 f205 	mul.w	r2, r2, r5
 8001594:	440a      	add	r2, r1
 8001596:	493a      	ldr	r1, [pc, #232]	; (8001680 <HAL_RCC_GetSysClockFreq+0x160>)
 8001598:	fba5 0101 	umull	r0, r1, r5, r1
 800159c:	1853      	adds	r3, r2, r1
 800159e:	4619      	mov	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f04f 0400 	mov.w	r4, #0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4623      	mov	r3, r4
 80015aa:	f7fe fe0b 	bl	80001c4 <__aeabi_uldivmod>
 80015ae:	4603      	mov	r3, r0
 80015b0:	460c      	mov	r4, r1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e049      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b6:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_RCC_GetSysClockFreq+0x158>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	099b      	lsrs	r3, r3, #6
 80015bc:	f04f 0400 	mov.w	r4, #0
 80015c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	ea03 0501 	and.w	r5, r3, r1
 80015cc:	ea04 0602 	and.w	r6, r4, r2
 80015d0:	4629      	mov	r1, r5
 80015d2:	4632      	mov	r2, r6
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	0154      	lsls	r4, r2, #5
 80015de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015e2:	014b      	lsls	r3, r1, #5
 80015e4:	4619      	mov	r1, r3
 80015e6:	4622      	mov	r2, r4
 80015e8:	1b49      	subs	r1, r1, r5
 80015ea:	eb62 0206 	sbc.w	r2, r2, r6
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	f04f 0400 	mov.w	r4, #0
 80015f6:	0194      	lsls	r4, r2, #6
 80015f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015fc:	018b      	lsls	r3, r1, #6
 80015fe:	1a5b      	subs	r3, r3, r1
 8001600:	eb64 0402 	sbc.w	r4, r4, r2
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	00e2      	lsls	r2, r4, #3
 800160e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001612:	00d9      	lsls	r1, r3, #3
 8001614:	460b      	mov	r3, r1
 8001616:	4614      	mov	r4, r2
 8001618:	195b      	adds	r3, r3, r5
 800161a:	eb44 0406 	adc.w	r4, r4, r6
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	02a2      	lsls	r2, r4, #10
 8001628:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800162c:	0299      	lsls	r1, r3, #10
 800162e:	460b      	mov	r3, r1
 8001630:	4614      	mov	r4, r2
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f04f 0400 	mov.w	r4, #0
 800163c:	461a      	mov	r2, r3
 800163e:	4623      	mov	r3, r4
 8001640:	f7fe fdc0 	bl	80001c4 <__aeabi_uldivmod>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_GetSysClockFreq+0x158>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	0c1b      	lsrs	r3, r3, #16
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	3301      	adds	r3, #1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	60bb      	str	r3, [r7, #8]
      break;
 8001664:	e002      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001668:	60bb      	str	r3, [r7, #8]
      break;
 800166a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166c:	68bb      	ldr	r3, [r7, #8]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	00f42400 	.word	0x00f42400
 8001680:	017d7840 	.word	0x017d7840

08001684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e041      	b.n	800171a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7fe fffe 	bl	80006ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3304      	adds	r3, #4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f000 f9d2 	bl	8001a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d001      	beq.n	800173c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e04e      	b.n	80017da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d022      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x80>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001766:	d01d      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x80>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d018      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x80>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_TIM_Base_Start_IT+0xc8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d013      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x80>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00e      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x80>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d009      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x80>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d004      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x80>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_TIM_Base_Start_IT+0xd8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d111      	bne.n	80017c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d010      	beq.n	80017d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017c6:	e007      	b.n	80017d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40000400 	.word	0x40000400
 80017ec:	40000800 	.word	0x40000800
 80017f0:	40000c00 	.word	0x40000c00
 80017f4:	40010400 	.word	0x40010400
 80017f8:	40014000 	.word	0x40014000
 80017fc:	40001800 	.word	0x40001800

08001800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b02      	cmp	r3, #2
 8001814:	d122      	bne.n	800185c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b02      	cmp	r3, #2
 8001822:	d11b      	bne.n	800185c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f06f 0202 	mvn.w	r2, #2
 800182c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f8f6 	bl	8001a34 <HAL_TIM_IC_CaptureCallback>
 8001848:	e005      	b.n	8001856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8e9 	bl	8001a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f8f8 	bl	8001a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b04      	cmp	r3, #4
 8001868:	d122      	bne.n	80018b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b04      	cmp	r3, #4
 8001876:	d11b      	bne.n	80018b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0204 	mvn.w	r2, #4
 8001880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f8cc 	bl	8001a34 <HAL_TIM_IC_CaptureCallback>
 800189c:	e005      	b.n	80018aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8bf 	bl	8001a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f8ce 	bl	8001a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d122      	bne.n	8001904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d11b      	bne.n	8001904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f06f 0208 	mvn.w	r2, #8
 80018d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2204      	movs	r2, #4
 80018da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f8a2 	bl	8001a34 <HAL_TIM_IC_CaptureCallback>
 80018f0:	e005      	b.n	80018fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f895 	bl	8001a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f8a4 	bl	8001a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b10      	cmp	r3, #16
 8001910:	d122      	bne.n	8001958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b10      	cmp	r3, #16
 800191e:	d11b      	bne.n	8001958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0210 	mvn.w	r2, #16
 8001928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2208      	movs	r2, #8
 800192e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f878 	bl	8001a34 <HAL_TIM_IC_CaptureCallback>
 8001944:	e005      	b.n	8001952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f86b 	bl	8001a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f87a 	bl	8001a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d10e      	bne.n	8001984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d107      	bne.n	8001984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f06f 0201 	mvn.w	r2, #1
 800197c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f846 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b80      	cmp	r3, #128	; 0x80
 8001990:	d10e      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199c:	2b80      	cmp	r3, #128	; 0x80
 800199e:	d107      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f97f 	bl	8001cae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ba:	2b40      	cmp	r3, #64	; 0x40
 80019bc:	d10e      	bne.n	80019dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c8:	2b40      	cmp	r3, #64	; 0x40
 80019ca:	d107      	bne.n	80019dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f83e 	bl	8001a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d10e      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d107      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0220 	mvn.w	r2, #32
 8001a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f94a 	bl	8001c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
	...

08001a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3f      	ldr	r2, [pc, #252]	; (8001b7c <TIM_Base_SetConfig+0x110>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8a:	d00f      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3c      	ldr	r2, [pc, #240]	; (8001b80 <TIM_Base_SetConfig+0x114>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d00b      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <TIM_Base_SetConfig+0x118>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d007      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <TIM_Base_SetConfig+0x11c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d003      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a39      	ldr	r2, [pc, #228]	; (8001b8c <TIM_Base_SetConfig+0x120>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d108      	bne.n	8001abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <TIM_Base_SetConfig+0x110>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001acc:	d027      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <TIM_Base_SetConfig+0x114>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d023      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <TIM_Base_SetConfig+0x118>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <TIM_Base_SetConfig+0x11c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01b      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <TIM_Base_SetConfig+0x120>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d017      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <TIM_Base_SetConfig+0x124>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <TIM_Base_SetConfig+0x128>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00f      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <TIM_Base_SetConfig+0x12c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00b      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <TIM_Base_SetConfig+0x130>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <TIM_Base_SetConfig+0x134>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <TIM_Base_SetConfig+0x138>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <TIM_Base_SetConfig+0x110>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <TIM_Base_SetConfig+0xf8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <TIM_Base_SetConfig+0x120>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d103      	bne.n	8001b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	615a      	str	r2, [r3, #20]
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800
 8001b88:	40000c00 	.word	0x40000c00
 8001b8c:	40010400 	.word	0x40010400
 8001b90:	40014000 	.word	0x40014000
 8001b94:	40014400 	.word	0x40014400
 8001b98:	40014800 	.word	0x40014800
 8001b9c:	40001800 	.word	0x40001800
 8001ba0:	40001c00 	.word	0x40001c00
 8001ba4:	40002000 	.word	0x40002000

08001ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e05a      	b.n	8001c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d022      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0c:	d01d      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d018      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00e      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d009      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d004      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10c      	bne.n	8001c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40000800 	.word	0x40000800
 8001c8c:	40000c00 	.word	0x40000c00
 8001c90:	40010400 	.word	0x40010400
 8001c94:	40014000 	.word	0x40014000
 8001c98:	40001800 	.word	0x40001800

08001c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <__libc_init_array>:
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	2500      	movs	r5, #0
 8001cc4:	4e0c      	ldr	r6, [pc, #48]	; (8001cf8 <__libc_init_array+0x38>)
 8001cc6:	4c0d      	ldr	r4, [pc, #52]	; (8001cfc <__libc_init_array+0x3c>)
 8001cc8:	1ba4      	subs	r4, r4, r6
 8001cca:	10a4      	asrs	r4, r4, #2
 8001ccc:	42a5      	cmp	r5, r4
 8001cce:	d109      	bne.n	8001ce4 <__libc_init_array+0x24>
 8001cd0:	f000 f822 	bl	8001d18 <_init>
 8001cd4:	2500      	movs	r5, #0
 8001cd6:	4e0a      	ldr	r6, [pc, #40]	; (8001d00 <__libc_init_array+0x40>)
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	; (8001d04 <__libc_init_array+0x44>)
 8001cda:	1ba4      	subs	r4, r4, r6
 8001cdc:	10a4      	asrs	r4, r4, #2
 8001cde:	42a5      	cmp	r5, r4
 8001ce0:	d105      	bne.n	8001cee <__libc_init_array+0x2e>
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ce8:	4798      	blx	r3
 8001cea:	3501      	adds	r5, #1
 8001cec:	e7ee      	b.n	8001ccc <__libc_init_array+0xc>
 8001cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cf2:	4798      	blx	r3
 8001cf4:	3501      	adds	r5, #1
 8001cf6:	e7f2      	b.n	8001cde <__libc_init_array+0x1e>
 8001cf8:	08001d48 	.word	0x08001d48
 8001cfc:	08001d48 	.word	0x08001d48
 8001d00:	08001d48 	.word	0x08001d48
 8001d04:	08001d4c 	.word	0x08001d4c

08001d08 <memset>:
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4402      	add	r2, r0
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <memset+0xa>
 8001d10:	4770      	bx	lr
 8001d12:	f803 1b01 	strb.w	r1, [r3], #1
 8001d16:	e7f9      	b.n	8001d0c <memset+0x4>

08001d18 <_init>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	bf00      	nop
 8001d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1e:	bc08      	pop	{r3}
 8001d20:	469e      	mov	lr, r3
 8001d22:	4770      	bx	lr

08001d24 <_fini>:
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d26:	bf00      	nop
 8001d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2a:	bc08      	pop	{r3}
 8001d2c:	469e      	mov	lr, r3
 8001d2e:	4770      	bx	lr
